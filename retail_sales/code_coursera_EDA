# retail data analysis
# import packages
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import openpyxl
import seaborn as sns
from IPython.display import display     # show for beautiful
from scipy import stats


# read data
a=pd.read_excel(r"C:\Users\Desktop\Online Retail.xlsx")


# describtive statistic and some imformation about data
print(a.shape)
print(a.columns)
print(a.describe())
print(a.info())


# clean data
a=a.dropna(how="any")
a=a.drop_duplicates()
a["CustomerID"]=a["CustomerID"].astype("int")
a["CustomerID"]=a["CustomerID"].astype("str")
a=a[a["UnitPrice"]>0]
c=a
c=c.drop(c[c["Description"].str.contains(r'\?')].index)  


# clean data
b=a
b=b.dropna()
b=b.drop_duplicates()
b=b.drop(columns=["Description","InvoiceDate"])
b.sort_values(by="CustomerID",ascending=True,inplace=True)
b=b.reset_index()
b=b.drop(columns=["index"])

===============================================================


# Revenue Share by Region
b["Country"]=b["Country"].replace("Unspecified","Others")
b_loc=pd.DataFrame({"Quantity":b["Quantity"],"UnitPrice":b["UnitPrice"],"Country":b["Country"]})
b_loc=b_loc.sort_values(by="Country")

loc_rev=pd.DataFrame({"Country":b_loc["Country"],"Revenue":0.0})
loc_rev=loc_rev.drop_duplicates()

temp_price=0.0
j=0
for i in range(b["Country"].count()-1):
    temp_price=temp_price+b_loc.iloc[i,0]*b_loc.iloc[i,1]
    if b_loc.iloc[i,2] != b_loc.iloc[i+1,2]:
        loc_rev.iloc[j,1]=temp_price
        temp_price=0
        j=j+1

if b_loc.iloc[i+1,2] == b_loc.iloc[i,2]:
    temp_price=temp_price+b_loc.iloc[i+1,0]*b_loc.iloc[i+1,1]
else:
    temp_price=b_loc.iloc[i+1,0]*b_loc.iloc[i+1,1]
loc_rev.iloc[j,1]=temp_price


## Revenue Share by Region(graph)
n=10
loc_rev_t=loc_rev.nlargest(n=n,columns=["Revenue"])
loc_rev_t=loc_rev_t.sort_values(by=["Revenue"],ascending=False)

plt.figure(figsize=(15,6))
plt.bar(loc_rev_t["Country"],loc_rev_t["Revenue"],color="blue")
plt.show()


===============================================================


# season sales in UK
c["InvoiceDate"] = pd.to_datetime(c["InvoiceDate"], format='%Y/%m/%d %H:%M')
c["year"]=c['InvoiceDate'].dt.year
c["month"]=c['InvoiceDate'].dt.month
c["day"]=c['InvoiceDate'].dt.day
c["hour"]=c['InvoiceDate'].dt.hour
c["minute"]=c['InvoiceDate'].dt.minute


# season month[{3 4 5:"spring",6 7 8:"summer",9 10 11:"fall", 12 1 2:"winter"}]
c_UK=c[c["Country"]=="United Kingdom"]

c_UK.loc[(c_UK["month"]>=3) & (c_UK["month"]<=5),"season"]="spring"
c_UK.loc[(c_UK["month"]>=6) & (c_UK["month"]<=8),"season"]="summer"
c_UK.loc[(c_UK["month"]>=9) & (c_UK["month"]<=11),"season"]="fall"
c_UK.loc[(c_UK["month"]==12) | (c_UK["month"]<=2),"season"]="winter"
c_UK=c_UK.sort_values(by=["season"],ascending=False)

season=["spring","summer","fall","winter"]
data=[0.0,0.0,0.0,0.0]
ss=pd.DataFrame([data],columns=season)

k=0
for i in season:
    R=c_UK[c_UK["season"]==i]
    R=R.loc[:,["Quantity","UnitPrice"]]
    temp=0
    Ri=R.describe()
    # print(Ri)
    for j in range(R["Quantity"].count()):
        temp=R.iloc[j,0]*R.iloc[j,1]+temp
    
    ss.iloc[0,k]=temp
    k=k+1    


## season sales in UK(graph)
plt.figure(figsize=(15,6))
plt.xlabel("season",fontsize=20)
plt.ylabel("revenue",fontsize=20)
plt.title("season sales in UK")
plt.bar(x=season,height=ss.iloc[0,:],color="black")


===============================================================


# find the best-selling product in Fall in UK
sor=c_UK[c_UK["season"]=="fall"]
sor=sor.sort_values(by="Description",ascending=True)
sor_temp=sor["Description"]
sor_temp=sor_temp.drop_duplicates()
sor_temp=pd.DataFrame(sor_temp)
sor_temp["revenue"]=0.0

temp_price=0.0
j=0
for i in range(sor["Description"].count()-1):
    temp_price=temp_price+sor.iloc[i,3]*sor.iloc[i,5]
    if sor.iloc[i,2] != sor.iloc[i+1,2]:
        sor_temp.iloc[j,1]=temp_price
        temp_price=0
        j=j+1

if sor.iloc[i+1,2] == sor.iloc[i,2]:
    temp_price=temp_price+sor.iloc[i+1,3]*sor.iloc[i+1,5]
else:
    temp_price=sor.iloc[i+1,3]*sor.iloc[i+1,5]
sor_temp.iloc[j,1]=temp_price


## find the best-selling product in Fall in UK(graph)
fall_go=sor_temp.nlargest(n=10,columns=["revenue"])
plt.figure(figsize=(20,6))
plt.bar(x=fall_go["Description"],height=fall_go["revenue"],color="black")
plt.xticks(rotation=90)
plt.xlabel("product",fontsize=20)
plt.ylabel("revenue",fontsize=20)
plt.title("best sell product in fall in UK")
plt.show()


===============================================================


# find the monthly quantity trend in best-selling product in UK
ffit=fall_go["Description"]
for k in ffit:
    topsale=c[c["Description"]==k]
    topsale=topsale.sort_values(by="month",ascending=True)
    coll=["1","2","3","4","5","6","7","8","9","10","11","12"]
    topsale_stor = pd.DataFrame(0, index=range(1), columns=coll)
    q=0

    for j in range(1,13):
        A=topsale[topsale["month"]==j]
        if A.empty == True:
            topsale_stor.iloc[0,j-1]=q
            continue
        for i in range(A["Description"].count()):
            q=q+A.iloc[i,3]
        topsale_stor.iloc[0,j-1]=q
        q=0
   

    ## find the monthly quantity trend in best-selling product in UK(graph)
    plt.figure(figsize=(10,6))
    plt.plot(coll,topsale_stor.iloc[0,:],marker=".")
    plt.xlabel("month",fontsize=20)
    plt.ylabel("quantity",fontsize=20)
    plt.title(k)
    plt.show()


===============================================================


# Find the trend about warmer product  
stat=None
winsale=["WARMER","HOT WATER"]
for s in winsale:
    WAR=c[c["Description"].str.contains(s)]
    WAR=WAR["Description"]
    WAR=WAR.drop_duplicates()
    
    for k in WAR:
        topsale=c[c["Description"]==k]
        topsale=topsale.sort_values(by="month",ascending=True)
        coll=["1","2","3","4","5","6","7","8","9","10","11","12"]
        topsale_stor = pd.DataFrame(0, index=range(1), columns=coll)
        q=0
    
        for j in range(1,13):
            A=topsale[topsale["month"]==j]
            if A.empty == True:
                topsale_stor.iloc[0,j-1]=q
                continue
            for i in range(A["Description"].count()):
                q=q+A.iloc[i,3]
            topsale_stor.iloc[0,j-1]=q
            q=0
    
        #Find the trend about product "WARMER"(graph)
        plt.figure(figsize=(10,6))
        plt.plot(coll,topsale_stor.iloc[0,:],marker=".")
        plt.xlabel("month",fontsize=20)
        plt.ylabel("quantity",fontsize=20)
        plt.title(k)
        plt.show()


===============================================================


# test whether warmer product is famous in fall and winter than in spring and summer
TP=pd.DataFrame({"T":0.0,"pval":0.0},index=stat.index)
for j in stat.index:
    stat_temp=pd.DataFrame(stat.loc[j,:]).T
    stat_sum=stat_temp.iloc[0,2:8]
    stat_win=stat_temp.iloc[0,[0,1,8,9,10,11]]
    T,pval=stats.ttest_ind(stat_sum,stat_win,alternative="less")
    TP.loc[j,"T"]=T
    TP.loc[j,"pval"]=pval

BBB=TP["pval"]<0.05
print(BBB.value_counts())
BBB=TP["T"]<0
print(BBB.value_counts())
T,pval=stats.ttest_ind(TP["T"],0,alternative="less")
print(pval)


===============================================================


# Find the trend about Chrismas product  
stat=None
WAR=c[c["Description"].str.contains("CHRISTMAS")]
WAR=WAR["Description"]
WAR=WAR.drop_duplicates()

for k in WAR:

    topsale=c[c["Description"]==k]
    topsale=topsale.sort_values(by="month",ascending=True)
    coll=["1","2","3","4","5","6","7","8","9","10","11","12"]
    topsale_stor = pd.DataFrame(0, index=[k], columns=coll)    
    

    q=0
    for j in range(1,13):
        A=topsale[topsale["month"]==j]
        if A.empty == True:
            topsale_stor.iloc[0,j-1]=q
            continue
        for i in range(A["Description"].count()):
            q=q+A.iloc[i,3]
        topsale_stor.iloc[0,j-1]=q
        q=0
    stat=pd.concat([stat,topsale_stor],axis=0)


===============================================================


# test the hyphothesis that in month 10 11 12, the average sale of Chrismas product is higher than other month.
TP1=pd.DataFrame({"T":0.0,"pval":0.0},index=stat.index)
for j in stat.index:
    stat_temp=pd.DataFrame(stat.loc[j,:]).T
    stat_sum=stat_temp.iloc[0,:9]
    stat_win=stat_temp.iloc[0,[9,10,11]]
    T,pval=stats.ttest_ind(stat_sum,stat_win,alternative="less")
    TP1.loc[j,"T"]=T
    TP1.loc[j,"pval"]=pval
    
tmean=TP1["T"].mean()
p_value =1 - stats.t.cdf(abs(tmean), 149)
print(p_value)


===============================================================


# find the best-selling product about Christmas
b="CHRISTMAS"
SK=c[c["Description"].str.contains(b)]
SK=SK.sort_values(by=["Description"],ascending=True)
SK1=SK["Description"].drop_duplicates()
SK2=pd.DataFrame({"Description":SK1,"Q":0.0})
SK2=SK2.set_index("Description")

q=0
for j in SK1:
    CH=SK[SK["Description"]==j]
    for i in range(CH["Description"].count()):
        q=q+CH.iloc[i,3]
    SK2.loc[j,:]=q
    q=0

SK2=SK2[SK2["Q"]>=0]
SK_big=SK2.nlargest(10,columns=["Q"])
SK_small=SK2.nsmallest(10,columns=["Q"])
print(SK2.shape)


===============================================================


# find the best-selling product about Christmas(graph)
plt.figure(figsize=(15,6))
plt.title("The quantity of CHRISTMAS goods sold",fontsize=20)
plt.bar(x=SK_big.index,height=SK_big["Q"],color="blue")
plt.xticks(rotation=20)
plt.xlabel("goods")
plt.ylabel("Q")
plt.show()

plt.figure(figsize=(15,6))
plt.title("The quantity of CHRISTMAS goods sold",fontsize=20)
plt.bar(x=SK_small.index,height=SK_small["Q"],color="black")
plt.xticks(rotation=20)
plt.xlabel("goods")
plt.ylabel("Q")
plt.show()
